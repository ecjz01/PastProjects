/*  Enfei Zhang
    V. Krasteva
    January 16, 2018
    This is a program will allow the user to play the game of Maastermind. Mastermind is a game where the user has a set amount of tries to guess a random set of colours
    that are generated by the programIn the game there are 3 difficulties varying from the amount of colours they have to guess. To access the cheat mode (which will
    reveal the answer under the colours through the numbers they must enter) you simply have to type "CHEAT" into the guess section.

    Variable Dictionary
    Name                Type                Purpose
    choice              int                 To know which main menu option the user has selected
    level               int                 To know which difficulty the user will want to play/look at
    arial               Font                The font for some text
*/
import java.awt.*;                                          // gives access to java command libraries
import hsa.Console;                                         // gives access to Console class file
import javax.swing.JOptionPane;
import java.io.*;
import java.lang.*;

public class Mastermind                                  // creates a new class called Mastermind
{ // creates an instance variable of Console

    Console c;  //class so the output window can be made
    int choice, level;
    final Font arial = new Font ("Arial", Font.PLAIN, 30);

    //This method clears the score and puts the title in the center of each screen
    private void title ()                                // drawTitle method
    {
	c.clear (); //Clears the screen
	c.print (' ', 35);
	c.println ("Mastermind");
	c.println ();
    }


    //This method allows the user time to read
    private void pauseProgram ()
    {
	c.println ("Press any key to continue...");
	c.getChar ();
    }


    /*This method generates the answer that the user will be trying to guess. This method takes the level to know how many numbers to generate

      Variable Dictionary
      Name              Type            Purpose
      output            String          Returns the answer to the program so that it has something to compare the user's guesses to

      The for loop in this method is there to add each number that is randomly generated to the output*/
    private String answerGenerator (int level)
    {
	String output = "";
	for (int x = 0 ; x < level + 3 ; x++) //Runs the amount of times needed to generate the answer
	{
	    output = output + Integer.toString ((int) (Math.random () * (-7) + 8)) + " ";   //toString is from http://javadevnotes.com/java-integer-to-string-examples#p1
	}
	return output;
    }


    /*This method checks if the users total answer is correct or not. It takes the users guesses and the answer then compares them

      Variable Dictionary
      Name              Type            Purpose
      status            boolean         To return to the user whether they have won or not

      The for loop in this method goes through all the guesses and answers to compare them
      The if statement checks if the guess at that position in the array is the same as the answer in the same position*/
    private boolean answerChecker (int[] guesses, int[] answers)
    {
	boolean status = false;
	for (int x = 0 ; x < level + 3 ; x++)   //Goes through the entire array
	{
	    if (guesses [x] == answers [x])     //If they are both the same
	    {
		status = true;
	    }
	    else    //If they are'nt both the same
	    {
		status = false;
		break;  //Breaks because it is impossible for the user to be right if one is wrong
	    }
	}
	return status;
    }


    /*This method generates a set of numbers used to determine which colour to return on the feedback, by checking the answers and guesses
      Variable Dictionary
      Name              Type            Purpose
      temp              int[]           used to transfer the answers so that the answers are unaffected
      output            String          used to output back to the program to know which colours to show

      The first for loop is used to transfer the answers to the temp variable
      The second for loop goes through both arrays
      The third for loop goes through the remaining guesses
      The first if statement checks if the guess is "fully" correct (right colour and right position)
      The second if statement checks which level it is
      The nested if statement checks if any guesses are "somewhat" correct (right colour and wrong position)
      The second nested if statement in each nested if statement checks for which specific answer was matched*/
    private String guess (int[] guesses, int level, int[] answers)
    {
	int[] temp = new int [level + 3];
	String output = "";
	for (int x = 0 ; x < level + 3 ; x++)
	{
	    temp [x] = answers [x]; //Adds answers to temp so that the answers won't be interfered with
	}
	for (int x = 0 ; x < level + 3 ; x++)
	{
	    if (guesses [x] == temp [x])    //If they fully match
	    {
		output = output + "2 "; //Adds a 2 to the output
		temp [x] = 0;           //Removes the answer from the list so that it won't be repeated
	    }
	}
	for (int x = 0 ; x < level + 3 ; x++)   //Goes through the list again
	{
	    if (level == 1) //If the user is on the first level
	    {
		if (guesses [x] == temp [level + 2] || guesses [x] == temp [level + 1] || guesses [x] == temp [level] || guesses [x] == temp [level - 1])   //If the current guess is equal to any of the answers ("Somewhat match")
		{
		    if (guesses [x] == temp [level + 2])    //If the guess somewhat matches the last answer
			temp [level + 2] = 0;   //Removes the answer from the list so that it won't be repeated
		    else if (guesses [x] == temp [level + 1])   //If the guess somewhat matches the second answer
			temp [level + 1] = 0;   //Removes the answer from the list so that it won't be repeated
		    else if (guesses [x] == temp [level])    //If the guess somewhat matches the third answer
			temp [level] = 0;   //Removes the answer from the list so that it won't be repeated
		    else    //If the guess somewhat matches the first answer
			temp [level - 1] = 0;   //Removes the answer from the list so that it won't be repeated
		    output = output + "1 "; //Adds a 1 to the output
		}
	    }
	    else if (level == 2)    //If the user is on the second level
	    {
		if (guesses [x] == temp [level + 2] || guesses [x] == temp [level + 1] || guesses [x] == temp [level] || guesses [x] == temp [level - 1] || guesses [x] == temp [level - 2])    //If the current guess is equal to any of the answers ("Somewhat match")
		{
		    if (guesses [x] == temp [level + 2])    //If the guess somewhat matches the last answer
			temp [level + 2] = 0;   //Removes the answer from the list so that it won't be repeated
		    else if (guesses [x] == temp [level + 1])    //If the guess somewhat matches the second answer
			temp [level + 1] = 0;   //Removes the answer from the list so that it won't be repeated
		    else if (guesses [x] == temp [level])   //If the guess somewhat matches the third answer
			temp [level] = 0;   //Removes the answer from the list so that it won't be repeated
		    else if (guesses [x] == temp [level - 1])   //If the guess somewhat matches the fourth answer
			temp [level - 1] = 0;   //Removes the answer from the list so that it won't be repeated
		    else    //If the guess somewhat matches the first answer
			temp [level - 2] = 0;   //Removes the answer from the list so that it won't be repeated
		    output = output + "1 "; //Adds a 1 to the output
		}
	    }
	    else    //If the user is on the third level
	    {
		if (guesses [x] == temp [level + 2] || guesses [x] == temp [level + 1] || guesses [x] == temp [level] || guesses [x] == temp [level] - 1 || guesses [x] == temp [level - 2] || guesses [x] == temp [level - 3]) //If the current guess is equal to any of the answers ("Somewhat match")
		{
		    if (guesses [x] == temp [level + 2])    //If the guess somewhat matches the last answer
			temp [level + 2] = 0;   //Removes the answer from the list so that it won't be repeated
		    else if (guesses [x] == temp [level + 1])    //If the guess somewhat matches the second answer
			temp [level + 1] = 0;   //Removes the answer from the list so that it won't be repeated
		    else if (guesses [x] == temp [level])   //If the guess somewhat matches the third answer
			temp [level] = 0;   //Removes the answer from the list so that it won't be repeated
		    else if (guesses [x] == temp [level - 1])   //If the guess somewhat matches the fourth answer
			temp [level - 1] = 0;   //Removes the answer from the list so that it won't be repeated
		    else if (guesses [x] == temp [level - 2])   //If the guess somewhat matches the fifth answer
			temp [level - 2] = 0;   //Removes the answer from the list so that it won't be repeated
		    else    //If the guess somewhat matches the first answer
			temp [level - 3] = 0;   //Removes the answer from the list so that it won't be repeated
		    output = output + "1 "; //Adds a 1 to the output
		}
	    }
	}
	return output;
    }


    /*This method draws an animation to introduce the game

      Variable Dictionary
      Name              Type            Purpose
      a                 Console         A variable for my splash screen to run*/
    public void splashScreen ()
    {
	SplashScreen a = new SplashScreen (c);
	a.run ();
    }


    /*This method asks the user which screen they wish to go to and gets their answer

      Variable Dictionary
      Name              Type        Purpose
      numstr            String      Takes the users input as a string to errortrap more easily

      The while loop is there to make sure that it keeps asking for input until it gets a valid input
      The try catch block is there to catch NumberFormatExceptions
      The if statement is there to check for a valid input*/
    public void mainMenu ()
    {
	String numstr;
	title ();   //Clears screen draws title
	c.print (' ', 34);
	c.println ("1. Play Game");
	c.print (' ', 33);
	c.println ("2. Instructions");
	c.print (' ', 33);
	c.println ("3. High Scores");
	c.print (' ', 34);
	c.println ("4. Exit Game");
	c.println ();
	c.print (' ', 19);
	c.print ("Please enter which option you would like: "); //Prompts user
	while (true)    //Keeps looping until broken (valid input)
	{
	    try //Try catch block to avoid NumberFormatExceptions
	    {
		numstr = c.readLine (); //Gets input
		choice = Integer.parseInt (numstr); //Parses the input into an integer
		if (choice != 1 && choice != 2 && choice != 3 && choice != 4)   //Checks if it is a valid input of 1, 2, 3, or 4
		{
		    JOptionPane.showMessageDialog (null, "Please enter either 1, 2, 3, or 4", "Error", JOptionPane.ERROR_MESSAGE);  //Sends an error message to the user
		    c.setCursor (8, 1); //Sets the cursor to the 3rd line
		    c.println ();   //Clears line
		    c.setCursor (8, 1); //Sets the cursor to the 3rd line
		    c.print (' ', 19);
		    c.print ("Please enter which option you would like: "); //Prompts user
		}
		else    //If the input is valid
		{
		    break;  //Breaks the while loop
		}
	    }
	    catch (NumberFormatException e)  //Catches NumberFormatExceptions
	    {
		JOptionPane.showMessageDialog (null, "Please enter either 1, 2, 3, or 4", "Error", JOptionPane.ERROR_MESSAGE);  //Sends an error message to the user
		c.setCursor (8, 1); //Sets the cursor to the 3rd line
		c.println ();   //Clears line
		c.setCursor (8, 1); //Sets the cursor to the 3rd line
		c.print (' ', 19);
		c.print ("Please enter which option you would like: "); //Prompts user
	    }
	}
    }


    /*This method gets the input for the level the user wants to play or see

      Variable Dictionary
      Name          Type            Purpose
      numstr        String          Takes the users input as a string to errortrap more easily

      The first if statement is to determine which prompt to use
      The while loop is there to continue asking for input until the input is valid
      The try catch block is there to catch NumberFormatExceptions
      The if statement is there to make sure the input is valid
      The nested if statement is to determine which prompt to use*/
    public void chooseDifficulty ()
    {
	String numstr;
	title ();   //Clears screen draws title
	c.print (' ', 35);
	c.println ("1. Level 1");
	c.print (' ', 35);
	c.println ("2. Level 2");
	c.print (' ', 35);
	c.println ("3. Level 3");
	c.print (' ', 35);
	c.println ("4. Main Menu");
	if (choice == 3)
	{
	    c.print (' ', 33);
	    c.println ("5. Reset Scores");
	}
	c.println ();
	if (choice == 1)    //If the user is playing
	{
	    c.print (' ', 15);
	    c.print ("Please enter the level you would like to play on: ");
	}
	else    //If the user is checking high scores
	{
	    c.print (' ', 8);
	    c.print ("Please enter the level you would like to see the high scores of: ");
	}
	while (true)    //Loops the input and prompt
	{
	    try //To check for NumberFormatException
	    {
		numstr = c.readLine ();
		level = Integer.parseInt (numstr);
		if (choice == 1 && level != 1 && level != 2 && level != 3 && level != 4 || choice == 3 && level != 1 && level != 2 && level != 3 && level != 4 && level != 5)  //If the input is invalid
		{
		    if (choice == 1)
		    {
			JOptionPane.showMessageDialog (null, "Please enter either 1, 2, 3, or 4", "Error", JOptionPane.ERROR_MESSAGE);  //Sends an error message to the user
			c.setCursor (8, 1);
			c.println ();
			c.setCursor (8, 1);
		    }
		    else
		    {
			JOptionPane.showMessageDialog (null, "Please enter either 1, 2, 3, 4, or 5", "Error", JOptionPane.ERROR_MESSAGE);  //Sends an error message to the user
			c.setCursor (9, 1);
			c.println ();
			c.setCursor (9, 1);
		    }
		    if (choice == 1)    //If the user is playing
		    {
			c.print (' ', 15);
			c.print ("Please enter the level you would like to play on: ");
		    }
		    else    //If the user is checking high scores
		    {
			c.print (' ', 8);
			c.print ("Please enter the level you would like to see the high scores of: ");
		    }
		}
		else    //If the input is valid
		{
		    break;  //Exits the while loop
		}
	    }
	    catch (NumberFormatException e)  //Catches NumberFormatException
	    {
		if (choice == 1)
		{
		    JOptionPane.showMessageDialog (null, "Please enter either 1, 2, 3, or 4", "Error", JOptionPane.ERROR_MESSAGE);  //Sends an error message to the user
		    c.setCursor (8, 1);
		    c.println ();
		    c.setCursor (8, 1);
		}
		else
		{
		    JOptionPane.showMessageDialog (null, "Please enter either 1, 2, 3, 4, or 5", "Error", JOptionPane.ERROR_MESSAGE);  //Sends an error message to the user
		    c.setCursor (9, 1);
		    c.println ();
		    c.setCursor (9, 1);
		}
		if (choice == 1)    //CIf the user is playing
		{
		    c.print (' ', 15);
		    c.print ("Please enter the level you would like to play on: ");
		}
		else    //If the user is checking high scores
		{
		    c.print (' ', 8);
		    c.print ("Please enter the level you would like to see the high scores of: ");
		}
	    }
	}
    }


    //This method explains to the user how the game works
    public void instructions ()
    {
	title ();   //Clears screen draws title
	c.println ("1. Choose the Play Game option");
	c.println ();
	c.println ("2. Select the level you wish to play on");
	c.println ();
	c.println ("3. Select the colours you think the code is made up of");
	c.println ();
	c.println ("4. An orange circle by the answer checking section means you got one of the");
	c.println ("colours in the right position while the white one means you got one of the");
	c.println ("colours right but it is not in the right position.");
	c.println ();
	c.println ("5. Keep guessing until you run out of tries or get the code right.");
	c.println ();
	c.print (' ', 34);
	c.println ("Get Cracking!");
	c.println ();
	pauseProgram ();    //Pauses the program for the user to read
    }


    /*This method creates the game and lets the user play the game

      Variable Dictionary
      Name              Type                Purpose
      guessNumber       int[]               To store which guess and colour is to be shown on the board
      attempt           int                 To store which attempt the user is on for the set
      set               int                 To store which set the user is on for the game
      column            int                 To store which column the output is on when giving feedback
      row               int                 To store row column the output is on when giving feedback
      temp2             int                 Stores a variable from status to sort them
      lines             int                 Stores the amount of lines in the file
      temp              String              Temporary input to be stored as a String for errortrapping
      userName          String              Stores the current user's name
      cheat             String              Stores the answer to be displayed if the user wishes to cheat
      answer            int[]               To store the answers for this run
      guess             int[]               To store the current set of guesses and compare them to the answer
      status            int[]               Stores how many guesses the user got "fully correct", "somewhat correct", or not correct whatsoever
      brown             Color               Color of the board
      cyan              Color               Color of one of the balls
      purple            Color               Color of one of the balls
      pink              Color               Color of one of the balls
      arial             Font                Font for the text of the numbers next to the balls
      numstr2           String[]            Stores how many guesses the user got "fully correct", "somewhat correct", or not correct whatsoever to be parsed
      status2           boolean             Stores whether the user has won or not
      numstr            String[]            To store the answer as a string to be parsed later on
      tempFileNames     String[]            To store the old file names from the high scores file
      tempFileScores    String[]            To store the old file scores from the high scores file
      oldFileContents   String[]            To store the old file contents from the high scores file
      a                 int                 Stores the JOptionPane status
      input             PrintWriter         Writes to the file
      output            BufferedReader      Reads from the file
      name              String              Takes the user's input for their name

      The first for loop trnansfers the numstr to the answer as a number and cheat as a String to be used later on
      The first if statement checks which level it is to know which board to draw
      The nested for loops for each part of the previous if statement in it are there to draw the spaces for guesses and feedback in the board
      The first while loop is to keep the game running while the user still has guesses left
      The nested while loop is to keep the guesses running on the same line while they are on the same set
      The second nested while loop is to keep getting inputs until the user enters a valid input
      The try catch block is to catch NumberFormatExceptions in the program
      The if statement in it is to check whether it is a guess, the CHEAT or EXiT option
      The nested if statement is to check whether the guess is valid or not
      The next if statement checks if the user wants to exit so it breaks the first nested while loop
      The if statement after checks if the user confirmed their answer
      The nested if statement checks which colour it was to draw it on the board
      The next if statement checks if the user wants to exit so it breaks the first while loop
      The for loop goes through the statuses of what kind of feedback to get and transfers it into an array
      The next for loop goes through the status array to sort it
      The if statement checks whether the next number is greater than the previous one to sort it from greatest to lowest
      The next for loop goes through the status list to draw them out
      The if statement in it checks for which level it is
      The if statement in the else if checks for if the circle is to be drawn on the circle that isnt aligned or not
      The if statement after checks for whether the columns need to be changed or not
      The next if statement checks whether the user got the answer right or not
      The if statement in it checks whether the user is out of sets
      The while loop is to repeat until the user enters a valid name
      The try catch block is to catch a NullPointerException if they dont enter a name
      The for loop is to go through the name
      The if statement is to check that there are no cpaces in the name
      The if statement after checks if the name was valid
      The next try catch block catches IOException
      The while loop is to read how many lines there are
      The for loop goes through the amount of lines
      The nexsted for loop goes through the oldFileContents array
      The if statement determines whether it is a name or score
      The next for loop will go through at most 10 items in the name and score arrays
      The if statement in the for loop checks for x being within the array to avoid an ArrayOutOfBoundsException
      The try catch block after is to catch NumberFormatExceptions*/
    public void display ()
    {
	int[] guessNumber = new int [level + 3];
	int attempt = 0, set = 0, column = 1, row = 1, temp2, lines = 0;
	String temp = "", userName, cheat = "";
	int[] answer = new int [level + 3];
	int[] guess = new int [level + 3];
	final Color brown = new Color (150, 75, 0);
	final Color cyan = new Color (0, 255, 255);
	final Color purple = new Color (160, 32, 240);
	final Color pink = new Color (238, 130, 238);
	String[] numstr2;
	boolean status2 = false;
	String[] numstr = (answerGenerator (level).split (" "));    //Sets numstr to the answers and .split is from https://stackoverflow.com/questions/3481828/how-to-split-a-string-in-java
	for (int x = 0 ; x < level + 3 ; x++)   //Goes through the answer and numstr array
	{
	    answer [x] = Integer.parseInt (numstr [x]); //Sets the answer to numstr
	    cheat = cheat + numstr [x]; //Adds the answer to the cheat option
	}
	title ();   //Clears the screen and draws the title
	//Draws the board
	c.setColor (brown);
	c.fillRect (50, 100, 325, 375);
	c.fillArc (25, 100, 50, 375, 90, 180);
	c.fillArc (350, 100, 50, 375, 270, 180);
	c.fillArc (50, 75, 325, 50, 0, 180);
	c.fillArc (50, 450, 325, 50, 180, 180);
	c.setColor (Color.RED);
	c.fillOval (460, 100, 50, 50);  //Draws the first option
	c.setColor (Color.ORANGE);
	c.fillOval (575, 100, 50, 50);  //Draws the second option
	c.setColor (Color.YELLOW);
	c.fillOval (460, 170, 50, 50);  //Draws the third option
	c.setColor (Color.GREEN);
	c.fillOval (575, 170, 50, 50);  //Draws the fourth option
	c.setColor (Color.BLUE);
	c.fillOval (575, 240, 50, 50); //Draws the fifth option
	c.setColor (cyan);
	c.fillOval (460, 240, 50, 50);  //Draws the sixth option
	c.setColor (purple);
	c.fillOval (575, 310, 50, 50);  //Draws the seventh option
	c.setColor (pink);
	c.fillOval (460, 310, 50, 50);  //Draws the eigth option
	c.setFont (arial);
	c.setColor (Color.BLACK);
	//Draws the numbers the user has to input to select each option
	c.drawString ("1.", 435, 135);
	c.drawString ("2.", 550, 135);
	c.drawString ("3.", 435, 205);
	c.drawString ("4.", 550, 205);
	c.drawString ("5.", 435, 275);
	c.drawString ("6.", 550, 275);
	c.drawString ("7.", 435, 345);
	c.drawString ("8.", 550, 345);
	if (level == 1) //If the user chose the first level
	{
	    for (int x = 0 ; x < 8 ; x++)   //Goes through each row of the program
	    {
		c.setColor (Color.WHITE);
		//Draws the guessing circles
		c.fillOval (60, 430 - x * 45, 40, 40);
		c.fillOval (120, 430 - x * 45, 40, 40);
		c.fillOval (180, 430 - x * 45, 40, 40);
		c.fillOval (240, 430 - x * 45, 40, 40);
		c.setColor (Color.BLACK);
		//Draws the response circles
		c.fillOval (340, 430 - x * 45, 20, 20);
		c.fillOval (320, 430 - x * 45, 20, 20);
		c.fillOval (340, 450 - x * 45, 20, 20);
		c.fillOval (320, 450 - x * 45, 20, 20);
	    }
	}
	else if (level == 2)    //If the user chose the second level
	{
	    for (int x = 0 ; x < 10 ; x++)  //Goes through each row of the program
	    {
		c.setColor (Color.WHITE);
		//Draws the guessing circles
		c.fillOval (60, 430 - x * 35, 30, 30);
		c.fillOval (110, 430 - x * 35, 30, 30);
		c.fillOval (160, 430 - x * 35, 30, 30);
		c.fillOval (210, 430 - x * 35, 30, 30);
		c.fillOval (260, 430 - x * 35, 30, 30);
		c.setColor (Color.BLACK);
		//Draws the response circles
		c.fillOval (340, 430 - x * 35, 15, 15);
		c.fillOval (320, 430 - x * 35, 15, 15);
		c.fillOval (355, 437 - x * 35, 15, 15);
		c.fillOval (340, 445 - x * 35, 15, 15);
		c.fillOval (320, 445 - x * 35, 15, 15);
	    }
	}
	else if (level == 3)    //If the user chose the third level
	{
	    for (int x = 0 ; x < 12 ; x++)  //Goes through each row of the program
	    {
		c.setColor (Color.WHITE);
		//Draws the guessing circles
		c.fillOval (60, 440 - x * 30, 25, 25);
		c.fillOval (100, 440 - x * 30, 25, 25);
		c.fillOval (140, 440 - x * 30, 25, 25);
		c.fillOval (180, 440 - x * 30, 25, 25);
		c.fillOval (220, 440 - x * 30, 25, 25);
		c.fillOval (260, 440 - x * 30, 25, 25);
		c.setColor (Color.BLACK);
		//Draws the response circles
		c.fillOval (350, 440 - x * 30, 15, 15);
		c.fillOval (330, 440 - x * 30, 15, 15);
		c.fillOval (310, 440 - x * 30, 15, 15);
		c.fillOval (350, 455 - x * 30, 15, 15);
		c.fillOval (330, 455 - x * 30, 15, 15);
		c.fillOval (310, 455 - x * 30, 15, 15);
	    }
	}
	while (set < level * 2 + 6) //Loops until user runs out of sets to guess on
	{
	    while (attempt < level + 3) //Loops until user runs out of attempts for the set
	    {
		while (true)    //Loops until user enter s a valid input
		{
		    try //Try catch block to avoid NumberFormatExceptions
		    {
			c.setCursor (3, 1);
			c.print ("Please select the color you wish to choose or type EXIT to exit: ");
			temp = c.readLine ();
			if (temp.equals ("CHEAT"))  //If the user decides to cheat
			{
			    break;  //Exits the loop
			}
			else if (temp.equals ("EXIT"))  //If the user decides to exit
			{
			    break;  //Exits the loop
			}
			else    //If the user inputs a guess
			{
			    guess [attempt] = Integer.parseInt (temp);  //Parses the temp variable to guess
			    if (guess [attempt] < 1 || guess [attempt] > 8) //If the input is invalid
			    {
				JOptionPane.showMessageDialog (null, "Please enter an integer between 1 and 8!", "Error", JOptionPane.ERROR_MESSAGE);   //Sends an error message to the user
				c.setCursor (3, 1);
				c.println ();
				c.setCursor (3, 1);
				c.print ("Please select the color you wish to choose or type EXIT to exit: ");
			    }
			    else    //If the input is valid
				break;  //Breaks the loop
			}
		    }
		    catch (NumberFormatException e)  //Catches NumberFormatExceptions
		    {
			JOptionPane.showMessageDialog (null, "Please enter an integer between 1 and 8!", "Error", JOptionPane.ERROR_MESSAGE);   //Sends an error message to the user
			c.setCursor (3, 1);
			c.println ();
			c.setCursor (3, 1);
			c.print ("Please select the color you wish to choose or type EXIT to exit: ");
		    }
		}
		if (temp.equals ("EXIT"))   //If the user chose the EXIT option
		{
		    int a = JOptionPane.showConfirmDialog (null, "Are you sure you want to exit?", "Warning", JOptionPane.YES_NO_OPTION); //Confirms the user's choice
		    if (a == JOptionPane.YES_OPTION)    //If the user confirms their choice
			break;  //Breaks the loop
		}
		else if (temp.equals ("CHEAT")) //If the user chose the cheat option
		{
		    int a = JOptionPane.showConfirmDialog (null, "Are you sure you want to cheat?", "Warning", JOptionPane.YES_NO_OPTION); //Confirms the user's choice
		    if (a == JOptionPane.YES_OPTION)    //If the user confirms their choice
		    {
			c.setColor (Color.BLACK);
			c.drawString (cheat, 480, 450); //Puts the answer on the board
			c.setCursor (3, 1);
			c.println ();
			c.setCursor (3, 1);
			c.print ("Please select the color you wish to choose or type EXIT to exit: ");
		    }
		}
		else    //If the user inputted a guess
		{
		    int a = JOptionPane.showConfirmDialog (null, "Are you sure you want to choose this colour?", "Warning", JOptionPane.YES_NO_OPTION); //Confirms the user's choice
		    if (a == JOptionPane.YES_OPTION)    //If the user confirms the guess
		    {
			guessNumber [attempt] = Integer.parseInt (temp);    //Parses temp into the guessNumber variable
			//Sets the colour based on which colour they chose
			if (guessNumber [attempt] == 1)
			    c.setColor (Color.RED);
			else if (guessNumber [attempt] == 2)
			    c.setColor (Color.ORANGE);
			else if (guessNumber [attempt] == 3)
			    c.setColor (Color.YELLOW);
			else if (guessNumber [attempt] == 4)
			    c.setColor (Color.GREEN);
			else if (guessNumber [attempt] == 5)
			    c.setColor (cyan);
			else if (guessNumber [attempt] == 6)
			    c.setColor (Color.BLUE);
			else if (guessNumber [attempt] == 7)
			    c.setColor (pink);
			else
			    c.setColor (purple);
			if (level == 1) //If the user chose the first level
			    c.fillOval (60 + 60 * attempt, 430 - set * 45, 40, 40); //Fills in the circle
			else if (level == 2)    //If the user chose the second level
			    c.fillOval (60 + 50 * attempt, 430 - set * 35, 30, 30); //Fills in the circle
			else    //If the user chose the third level
			    c.fillOval (60 + 40 * attempt, 440 - set * 30, 25, 25); //Fills in the circle
			attempt++;  //Adds 1 to the amount of attempts the user has made for this set
		    }
		}
		c.setCursor (3, 1);
		c.println ();
	    }
	    if (temp.equals ("EXIT"))   //If the user chose the exit option
		break;
	    numstr2 = (guess (guess, level, answer).split (" "));   //Sets numstr2 to the .split if the feedback from the guess private method and .split is from https://stackoverflow.com/questions/3481828/how-to-split-a-string-in-java
	    int[] status = new int [numstr2.length];
	    for (int x = 0 ; x < numstr2.length ; x++)  //Goes through the status/numstr2 array
	    {
		status [x] = Integer.parseInt (numstr2 [x]);    //sets status to numstr2
	    }
	    for (int x = 0 ; x < status.length ; x++)   //Goes through the status array
	    {
		if (status [x] == 2)    //If the answer is fully right
		{
		    c.setColor (Color.WHITE);   //Sets the colour to white
		    if (level == 1) //If the user chose the first level
			c.fillOval (300 + column * 20, (410 + row * 20) - set * 45, 20, 20);    //Draws the response bubble
		    else if (level == 2)    //If the user chose the second level
			if (column == 1 && row == 3)    //If it is the last circle
			    c.fillOval (355, 437 - set * 35, 15, 15);   //Draws the response bubble
			else    //If it's any other circle
			    c.fillOval (300 + column * 20, (415 + row * 15) - set * 35, 15, 15);    //Draws the response bubble
		    else    //If the user chose the third level
			c.fillOval (290 + column * 20, (425 + row * 15) - set * 30, 15, 15);    //Draws the response bubble
		}
		else if (status [x] == 1)   //If the answer is somewhat right
		{
		    c.setColor (Color.ORANGE);  //Sets the colour to orange
		    if (level == 1) //If the user chose the first level
			c.fillOval (300 + column * 20, (410 + row * 20) - set * 45, 20, 20);    //Draws the response bubble
		    else if (level == 2)    //If the user chose the second level
			if (column == 1 && row == 3)    //If it is the last circle
			    c.fillOval (355, 437 - set * 35, 15, 15);   //Draws the response bubble
			else    //If it's any other circle
			    c.fillOval (300 + column * 20, (415 + row * 15) - set * 35, 15, 15);    //Draws the response bubble
		    else    //If the user chose the third level
			c.fillOval (290 + column * 20, (425 + row * 15) - set * 30, 15, 15);    //Draws the response bubble
		}
		if (column == (level + 3) / 2)  //If it reaches the last column
		{
		    column = 1; //Sets it to the first column again
		    row++;  //Changes the row down 1
		}
		else
		    column++;   //Changes the row 1 to the right
	    }
	    if (answerChecker (guess, answer) == false) //If the all the user's guesses are not right
	    {
		if (set == level * 2 + 5)   //If the user is out of tries
		{
		    JOptionPane.showMessageDialog (null, "Unfortunately you've lost! The answer was " + cheat, "Error", JOptionPane.ERROR_MESSAGE); //Tells the user they've lost
		}
		set++;  //Changes to the next set
		attempt = 0;    //Resets the attempts
		column = 1; //Resets the column
		row = 1;    //Resets the row
	    }
	    else    //If the user all the user's guesses are right
	    {
		while (true)    //Loops until the user's input is valid
		{
		    try //Try catch block to avoid NullPointerExceptions
		    {
			String name = JOptionPane.showInputDialog (null, "Congradulations you won please enter a name without spaces!");    //Asks the user to input a name to save to the high scores
			for (int x = 0 ; x < name.length () ; x++)  //Goes through the name
			{
			    if (name.charAt (x) == ' ') //If the character is a space
			    {
				status2 = false;    //Sets status2 to false
				break;  //breaks the for loop
			    }
			    else    //If the character isn't a space
				status2 = true; //Sets status2 to true
			}
			if (status2 == true)    //If there are no spaces in the name
			{
			    userName = name;    //Sets the userName to name
			    break;  //breaks the while loop
			}
			else    //If there are spaces in the name
			    JOptionPane.showMessageDialog (null, "Please do not have spaces in your name", "Error", JOptionPane.ERROR_MESSAGE); //Sends an error message

		    }
		    catch (NullPointerException e)  //Catches NulPointerExceptions
		    {
			JOptionPane.showMessageDialog (null, "Please enter a name!", "Error", JOptionPane.ERROR_MESSAGE);   //Sends an error message
		    }
		}
		try //Try catch block to avoid IOExceptions
		{
		    BufferedReader output = new BufferedReader (new FileReader ("Level" + level + "HighScores.txt"));   //Opens the highScores file to read
		    while (output.readLine () != null)  //While there is something on the file
		    {
			lines++;    //Adds 1 to the total amount of lines
		    }
		    output.close ();    //Closes and saves the file
		    BufferedReader output2 = new BufferedReader (new FileReader ("Level" + level + "HighScores.txt"));  //Opens the highScores file to read
		    String[] oldFileContents;   //Vatiable t contain the old contents of the file
		    String[] tempFileNames = new String [lines + 1];    //Sets the size of tempFileNames to the amount of lines + 1
		    String[] tempFileScores = new String [lines + 1];   //Sets the size of tempFileScores to the amount of lines + 1
		    tempFileNames [0] = userName;   //Sets the first element in userName to the current player's name
		    tempFileScores [0] = Integer.toString (set + 1);    //Sets the first element in userName to the current player's score and .toString is from http://javadevnotes.com/java-integer-to-string-examples#p1
		    for (int x = 1 ; x <= lines ; x++)  //Goes through the lines of the file
		    {
			oldFileContents = output2.readLine ().split (" ");  //Sets the oldFileContents array elements to the .split of the file contents and .split is from https://stackoverflow.com/questions/3481828/how-to-split-a-string-in-java
			for (int y = 0 ; y < oldFileContents.length ; y++)  //Goes through the contents of the file
			{
			    if (y % 2 == 0) //If it is a name
				tempFileNames [x] = oldFileContents [y];
			    else    //If it is a score
				tempFileScores [x] = oldFileContents [y];
			}
		    }
		    output2.close ();   //Closes and saves the file
		    //Sorts the items from highest to least
		    for (int x = 0 ; x < 10 ; x++)  //Goes through 10 items
		    {
			if (x < 0)  //If x goes below 0 to avoid errors
			    x = 0;  //Sets x to 0
			else if (x == tempFileScores.length - 1 || x == tempFileNames.length - 1)   //If there are less than 10 items in the arrays and it reaches the one after the final one
			    break;  //Exits the for loop
			try //Try catch block to avoid NumberFormatExceptions
			{
			    int Inttemp = Integer.parseInt (tempFileScores [x]);    //Sets a temporary score
			    String tempName = tempFileNames [x];    //Sets a temporary name
			    if (Inttemp > Integer.parseInt (tempFileScores [x + 1]))    //If the current score is greater than the next
			    {
				//Swaps the scores and names
				tempFileScores [x] = tempFileScores [x + 1];
				tempFileNames [x] = tempFileNames [x + 1];
				tempFileNames [x + 1] = tempName;
				tempFileScores [x + 1] = Integer.toString (Inttemp);    //.toString is from http://javadevnotes.com/java-integer-to-string-examples#p1
				x -= 2; //Goes back 1
			    }
			}
			catch (NumberFormatException e)  //Catches NumberFormatExceptions
			{
			}
		    }
		    try //Try catch block to avoid IOExceptions
		    {
			PrintWriter input = new PrintWriter (new FileWriter ("Level" + level + "HighScores.txt"));  //Opens the file to write on it
			for (int x = 0 ; x < 10 ; x++)  //Loops 10 times to only write 10 lines at most
			{
			    if (tempFileNames [x] == null || tempFileScores [x] == null)    //If there are no previous scores or names at that point in the array
			    {
				break;  //Exits the for loop
			    }
			    else    //If there are previous scores or names at that point in the array
			    {
				input.print (tempFileNames [x] + " ");  //Writes the user's name to the file with a space after
				input.println (tempFileScores [x]); //Writes the user's score and moves to the next line
			    }
			    if (x == tempFileScores.length - 1 || x == tempFileNames.length - 1)    //If the for loop is at the final part in the array
				break;  //Exits the for loop
			}
			input.close (); //Closes and saves the file
		    }
		    catch (IOException e)   //Catches IOExceptions
		    {
		    }
		}
		catch (IOException e)   //Catches IOExceptions (If there is no file)
		{
		    try //Try catch block to avoid IOExceptions
		    {
			PrintWriter input = new PrintWriter (new FileWriter ("Level" + level + "HighScores.txt"));  //Opens/Creates the file and allows things to be written onto it
			input.println (userName + " " + (set + 1)); //Writes the user's score onto the high scores file
			input.close (); //Closes the file and saves it
		    }
		    catch (IOException f)   //Catches IOExceptions
		    {
		    }
		}
		break;  //Exits the main while loop because the user has won
	    }
	}
    }


    //This program thanks the user for playing the game, says the name of the author and closes the game after 1 second
    //The try catch block is to avoid Exceptions with Thread.sleep
    public void goodbye ()
    {
	title ();   //Draws the title and clears the screen
	c.setCursor (10, 24);
	c.println ("Thank you for playing Mastermind");
	c.setCursor (11, 33);
	c.println ("By: Enfei Zhang");
	try
	{
	    Thread.sleep (1000);    //Delay
	}
	catch (Exception e)  //Catches Exceptions
	{
	}
	c.close (); //Closes the program
    }


    /*This program displays and resets high scores
      Variable Dictionary
      Name                  Type            Purpose
      combineHighScores     String[]        To store all the contents of the file
      name                  String[]        To store the names of the users
      score                 String[]        To store the scores of the users
      lines                 int             To store the amount of lines in the file
      pw                    PrintWriter     To write on the file
      output                BufferedReader  To read the file
      output2               BufferedReader  To read the file

      The first if statement checks whether the user is looking at scores or resetting them
      The try catch block is to catch the IOException
      The for loop goes through the different files
      The try catch block is to catch the IOException
      The for loop goes through the different elements of the array
      The while loop checks if there is something on the line
      The for loop goes through the lines of the file
      The nested for loop goes through the elements of the combineHighScores array
      The if statement checks whether it is to be stored in name or score
      The for loop after goes through the first 10 lines of the file
      The first nested if statement checks whether it is the last line or not
      The second nexted if statement checks whether there is a name and score to print or not
      The nested if statement in the second nested if statement checks if the first line is null or not
      The for loop in the exeption goes through all 10 sections of the list
      The if statement checks whether it was the last line or not*/
    public void highScores ()
    {
	String[] combineHighScores, name, score;
	int lines = 0;
	title ();   //Clears the screen and draws the title
	if (level == 5) //If the user selects the "Reset Scores option"
	{
	    try //Try catch block to catch IOExceptions
	    {
		for (int x = 1 ; x < 4 ; x++)   //Goes through the different files
		{
		    PrintWriter pw = new PrintWriter (new FileWriter ("Level" + x + "HighScores.txt")); //Opens the file to write in it
		    pw.println ();  //Erases the file contents
		    pw.close ();    //Closes and saves the file
		}
	    }
	    catch (IOException e)   //Catches the IOException
	    {
		JOptionPane.showMessageDialog (null, "There are no scores to be reset", "Error", JOptionPane.ERROR_MESSAGE);    //Error Message
	    }
	}
	else    //If the user is checking scores
	{
	    c.print (' ', 25);
	    c.print ("Name");
	    c.print (' ', 20);
	    c.println ("Score");
	    c.println ();
	    try //Try catch block to catch the IOException
	    {
		BufferedReader output = new BufferedReader (new FileReader ("Level" + level + "HighScores.txt"));   //Opens the file to read it
		while (output.readLine () != null)  //While there is content on the line
		{
		    lines++;    //Adds 1 to the amount of lines there are to set the size of the arrays
		}
		output.close ();    //Closes the file and saves it
		BufferedReader output2 = new BufferedReader (new FileReader ("Level" + level + "HighScores.txt"));  //Opens the file to read it
		name = new String [lines];  //Declares the variable with the size of the amount of lines there were on the file
		score = new String [lines];
		for (int x = 0 ; x < lines ; x++)   //To go through the lines of the file
		{
		    combineHighScores = output2.readLine ().split (" ");    //Sets the oldFileContents array elements to the .split of the file contents and .split is from https://stackoverflow.com/questions/3481828/how-to-split-a-string-in-java
		    for (int y = 0 ; y < combineHighScores.length ; y++)    //To go through the elements of the array
		    {
			if (y % 2 == 0) //If it is a name
			    name [x] = combineHighScores [y];   //adds that name to the name array
			else    //If it is a score
			    score [x] = combineHighScores [y];  //adds that score to the score array
		    }
		}
		output2.close ();
		for (int x = 0 ; x < 10 ; x++)  //Goes through the 10 lines of the high scores list
		{
		    if (x == 9) //If it's the last line
			c.print (' ', 23);
		    else    //If it's any other line
			c.print (' ', 24);
		    c.print ((x + 1) + ".");
		    if (x < lines)  //If there is a score on that line
		    {
			if (score [0] == null)  //If the first score has no value, because it was cleared
			{
			    c.print ("N/A");
			    c.print (' ', 21);
			    c.println ("N/A");
			}
			else    //If there is a score
			{
			    c.print (name [x]);
			    c.print (' ', (24 - name [x].length ()));
			    c.println (score [x]);
			}
		    }
		    else    //If there isn't a score on the line
		    {
			c.print ("N/A");
			c.print (' ', 21);
			c.println ("N/A");
		    }
		}
	    }
	    catch (IOException e)   //Catches the IOException
	    {
		for (int x = 0 ; x < 10 ; x++)  //Goes through the 10 lines of the high score list
		{
		    if (x == 9) //If it is the last line
			c.print (' ', 23);
		    else    //Every other line
			c.print (' ', 24);
		    c.print ((x + 1) + ".");    //Prints the number of the score
		    c.print ("N/A");
		    c.print (' ', 21);
		    c.println ("N/A");
		}
	    }
	    c.println ();
	    pauseProgram ();    //Pauses the program for the user to read
	}
    }


    public Mastermind ()                                     // Mastermind class constructor
    {
	c = new Console ("Mastermind");                                 // creates a new Console object window
    }


    public static void main (String[] args)                 // main method of a Java application
    {
	Mastermind d;                                        // creates instance variable of Mastermind
	d = new Mastermind ();                               // constructs a new Mastermind object
	d.splashScreen ();  //Calls the splashScreen method
	while (d.choice != 4)   //Loops until the user chooses to exit
	{
	    d.mainMenu ();  //Calls the mainMenu method
	    if (d.choice == 1)  //If the user selects to play
	    {
		while (true)    //Loops until the user decides to exit the menu
		{
		    d.chooseDifficulty ();  //Calls the chooseDifficulty method
		    if (d.level != 4)   //If the user chooses anything that isn't exit
		    {
			d.display ();   //Calls the display method
		    }
		    else    //If the user chooses exit
		    {
			break;  //Exits the while loop
		    }
		}
	    }
	    else if (d.choice == 2) //If the user selects the instructions option
	    {
		d.instructions ();  //Calls the instructions method
	    }
	    else if (d.choice == 3) //If the user selects the high scores option
	    {
		while (true)    //Loops until the user decides to exit the menu
		{
		    d.chooseDifficulty ();  //calls the chooseDifficulty method
		    if (d.level != 4)   //If the user chooses anything that isn't exit
		    {
			d.highScores ();    //calls the highScores method
		    }
		    else    //If the user chooses exit
		    {
			break;  //Exits the while loop
		    }
		}
	    }
	    else    //If the user chooses exit
	    {
		break;  //Breaks the main while loop
	    }
	}
	d.goodbye ();   //Calls the goodbye method
    }
}


